import { SingleTransaction as Transaction } from "vineyard-blockchain";
import { Collection } from "vineyard-ground/source/collection";
import { Model, TransactionToSave } from "./deposit-monitor-manager";
import { BaseBlock, BlockInfo, TransactionStatus } from "vineyard-blockchain";
import { Modeler } from "vineyard-ground/source/modeler";
import { BlockDao, LastBlockDao, MonitorDao, TransactionDao } from "./types";
export declare function getTransactionByTxidAndCurrency(transactionCollection: Collection<Transaction>, txid: string, currency: number): Promise<Transaction | undefined>;
export declare function saveTransaction(transactionCollection: Collection<Transaction>, transaction: TransactionToSave): Promise<Transaction>;
export declare function setStatus(transactionCollection: Collection<Transaction>, transaction: Transaction, status: TransactionStatus): Promise<Transaction>;
export declare function listPendingTransactions(ground: Modeler, transactionCollection: Collection<Transaction>, currency: number, maxBlockIndex: number): Promise<Transaction[]>;
export declare function getLastBlock(ground: Modeler, currency: number): Promise<BlockInfo | undefined>;
export declare function setLastBlock(ground: Modeler, currency: number, block: string): Promise<any>;
export declare function saveBlock(blockCollection: Collection<BlockInfo>, block: BaseBlock): Promise<BlockInfo>;
export declare function createBlockDao(model: Model): BlockDao;
export declare function createLastBlockDao(ground: Modeler): LastBlockDao;
export declare function createTransactionDao(model: Model): TransactionDao;
export declare function createMonitorDao(model: Model): MonitorDao;
